%%
%% @doc This module is auto-generated by rebar3_egrpc_plugin.
%%
%% This module was generated on 2025-06-15T05:25:10+00:00 and should not be modified manually
%% @end

-module(etcdgun_etcdserverpb_maintenance_service).

-export([alarm/2, alarm/3]).
-export([status/2, status/3]).
-export([defragment/2, defragment/3]).
-export([hash/2, hash/3]).
-export([hash_kv/2, hash_kv/3]).
-export([snapshot/2, snapshot/3]).
-export([move_leader/2, move_leader/3]).
-export([downgrade/2, downgrade/3]).

-define(GRPC_SERVICE_NAME, 'etcdserverpb.Maintenance').

%% @doc Call the unary RPC method `Alarm' of service `etcdserverpb.Maintenance'.
-spec alarm(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AlarmRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AlarmResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
alarm(Channel, Request) ->
    alarm(Channel, Request, #{}).

-spec alarm(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AlarmRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AlarmResponse'(),
    Opts :: egrpc_stub:opts().
alarm(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Alarm'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Maintenance/Alarm">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Status' of service `etcdserverpb.Maintenance'.
-spec status(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.StatusRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.StatusResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
status(Channel, Request) ->
    status(Channel, Request, #{}).

-spec status(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.StatusRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.StatusResponse'(),
    Opts :: egrpc_stub:opts().
status(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Status'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Maintenance/Status">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Defragment' of service `etcdserverpb.Maintenance'.
-spec defragment(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.DefragmentRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.DefragmentResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
defragment(Channel, Request) ->
    defragment(Channel, Request, #{}).

-spec defragment(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.DefragmentRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.DefragmentResponse'(),
    Opts :: egrpc_stub:opts().
defragment(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Defragment'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Maintenance/Defragment">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Hash' of service `etcdserverpb.Maintenance'.
-spec hash(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.HashRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.HashResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
hash(Channel, Request) ->
    hash(Channel, Request, #{}).

-spec hash(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.HashRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.HashResponse'(),
    Opts :: egrpc_stub:opts().
hash(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Hash'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Maintenance/Hash">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `HashKV' of service `etcdserverpb.Maintenance'.
-spec hash_kv(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.HashKVRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.HashKVResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
hash_kv(Channel, Request) ->
    hash_kv(Channel, Request, #{}).

-spec hash_kv(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.HashKVRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.HashKVResponse'(),
    Opts :: egrpc_stub:opts().
hash_kv(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'HashKV'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Maintenance/HashKV">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the server_streaming RPC method `Snapshot' of service `etcdserverpb.Maintenance'.
-spec snapshot(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.SnapshotRequest'(),
    Result :: egrpc_stub:server_streaming_ret().
snapshot(Channel, Request) ->
    snapshot(Channel, Request, #{}).

-spec snapshot(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:server_streaming_ret(),
    Request :: etcdgun_rpc_pb:'etcdserverpb.SnapshotRequest'(),
    Opts :: egrpc_stub:opts().
snapshot(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Snapshot'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Maintenance/Snapshot">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:server_streaming(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `MoveLeader' of service `etcdserverpb.Maintenance'.
-spec move_leader(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.MoveLeaderRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MoveLeaderResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
move_leader(Channel, Request) ->
    move_leader(Channel, Request, #{}).

-spec move_leader(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.MoveLeaderRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MoveLeaderResponse'(),
    Opts :: egrpc_stub:opts().
move_leader(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'MoveLeader'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Maintenance/MoveLeader">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Downgrade' of service `etcdserverpb.Maintenance'.
-spec downgrade(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.DowngradeRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.DowngradeResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
downgrade(Channel, Request) ->
    downgrade(Channel, Request, #{}).

-spec downgrade(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.DowngradeRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.DowngradeResponse'(),
    Opts :: egrpc_stub:opts().
downgrade(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Downgrade'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Maintenance/Downgrade">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).
