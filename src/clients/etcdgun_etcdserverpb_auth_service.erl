%%
%% @doc This module is auto-generated by rebar3_egrpc_plugin.
%%
%% This module was generated on 2025-06-16T03:17:46+00:00 and should not be modified manually
%% @end

-module(etcdgun_etcdserverpb_auth_service).

-export([auth_enable/2, auth_enable/3]).
-export([auth_disable/2, auth_disable/3]).
-export([auth_status/2, auth_status/3]).
-export([authenticate/2, authenticate/3]).
-export([user_add/2, user_add/3]).
-export([user_get/2, user_get/3]).
-export([user_list/2, user_list/3]).
-export([user_delete/2, user_delete/3]).
-export([user_change_password/2, user_change_password/3]).
-export([user_grant_role/2, user_grant_role/3]).
-export([user_revoke_role/2, user_revoke_role/3]).
-export([role_add/2, role_add/3]).
-export([role_get/2, role_get/3]).
-export([role_list/2, role_list/3]).
-export([role_delete/2, role_delete/3]).
-export([role_grant_permission/2, role_grant_permission/3]).
-export([role_revoke_permission/2, role_revoke_permission/3]).

-define(GRPC_SERVICE_NAME, 'etcdserverpb.Auth').

%% @doc Call the unary RPC method `AuthEnable' of service `etcdserverpb.Auth'.
-spec auth_enable(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthEnableRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthEnableResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
auth_enable(Channel, Request) ->
    auth_enable(Channel, Request, #{}).

-spec auth_enable(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthEnableRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthEnableResponse'(),
    Opts :: egrpc_stub:opts().
auth_enable(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'AuthEnable'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/AuthEnable">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `AuthDisable' of service `etcdserverpb.Auth'.
-spec auth_disable(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthDisableRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthDisableResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
auth_disable(Channel, Request) ->
    auth_disable(Channel, Request, #{}).

-spec auth_disable(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthDisableRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthDisableResponse'(),
    Opts :: egrpc_stub:opts().
auth_disable(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'AuthDisable'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/AuthDisable">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `AuthStatus' of service `etcdserverpb.Auth'.
-spec auth_status(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthStatusRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthStatusResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
auth_status(Channel, Request) ->
    auth_status(Channel, Request, #{}).

-spec auth_status(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthStatusRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthStatusResponse'(),
    Opts :: egrpc_stub:opts().
auth_status(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'AuthStatus'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/AuthStatus">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Authenticate' of service `etcdserverpb.Auth'.
-spec authenticate(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthenticateRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthenticateResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
authenticate(Channel, Request) ->
    authenticate(Channel, Request, #{}).

-spec authenticate(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthenticateRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthenticateResponse'(),
    Opts :: egrpc_stub:opts().
authenticate(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Authenticate'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/Authenticate">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `UserAdd' of service `etcdserverpb.Auth'.
-spec user_add(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserAddRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserAddResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
user_add(Channel, Request) ->
    user_add(Channel, Request, #{}).

-spec user_add(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserAddRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserAddResponse'(),
    Opts :: egrpc_stub:opts().
user_add(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'UserAdd'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/UserAdd">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `UserGet' of service `etcdserverpb.Auth'.
-spec user_get(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserGetRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserGetResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
user_get(Channel, Request) ->
    user_get(Channel, Request, #{}).

-spec user_get(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserGetRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserGetResponse'(),
    Opts :: egrpc_stub:opts().
user_get(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'UserGet'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/UserGet">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `UserList' of service `etcdserverpb.Auth'.
-spec user_list(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserListRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserListResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
user_list(Channel, Request) ->
    user_list(Channel, Request, #{}).

-spec user_list(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserListRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserListResponse'(),
    Opts :: egrpc_stub:opts().
user_list(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'UserList'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/UserList">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `UserDelete' of service `etcdserverpb.Auth'.
-spec user_delete(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserDeleteRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserDeleteResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
user_delete(Channel, Request) ->
    user_delete(Channel, Request, #{}).

-spec user_delete(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserDeleteRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserDeleteResponse'(),
    Opts :: egrpc_stub:opts().
user_delete(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'UserDelete'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/UserDelete">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `UserChangePassword' of service `etcdserverpb.Auth'.
-spec user_change_password(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserChangePasswordRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserChangePasswordResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
user_change_password(Channel, Request) ->
    user_change_password(Channel, Request, #{}).

-spec user_change_password(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserChangePasswordRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserChangePasswordResponse'(),
    Opts :: egrpc_stub:opts().
user_change_password(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'UserChangePassword'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/UserChangePassword">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `UserGrantRole' of service `etcdserverpb.Auth'.
-spec user_grant_role(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserGrantRoleRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserGrantRoleResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
user_grant_role(Channel, Request) ->
    user_grant_role(Channel, Request, #{}).

-spec user_grant_role(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserGrantRoleRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserGrantRoleResponse'(),
    Opts :: egrpc_stub:opts().
user_grant_role(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'UserGrantRole'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/UserGrantRole">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `UserRevokeRole' of service `etcdserverpb.Auth'.
-spec user_revoke_role(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserRevokeRoleRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserRevokeRoleResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
user_revoke_role(Channel, Request) ->
    user_revoke_role(Channel, Request, #{}).

-spec user_revoke_role(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthUserRevokeRoleRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthUserRevokeRoleResponse'(),
    Opts :: egrpc_stub:opts().
user_revoke_role(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'UserRevokeRole'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/UserRevokeRole">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `RoleAdd' of service `etcdserverpb.Auth'.
-spec role_add(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleAddRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleAddResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
role_add(Channel, Request) ->
    role_add(Channel, Request, #{}).

-spec role_add(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleAddRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleAddResponse'(),
    Opts :: egrpc_stub:opts().
role_add(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'RoleAdd'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/RoleAdd">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `RoleGet' of service `etcdserverpb.Auth'.
-spec role_get(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleGetRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleGetResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
role_get(Channel, Request) ->
    role_get(Channel, Request, #{}).

-spec role_get(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleGetRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleGetResponse'(),
    Opts :: egrpc_stub:opts().
role_get(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'RoleGet'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/RoleGet">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `RoleList' of service `etcdserverpb.Auth'.
-spec role_list(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleListRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleListResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
role_list(Channel, Request) ->
    role_list(Channel, Request, #{}).

-spec role_list(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleListRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleListResponse'(),
    Opts :: egrpc_stub:opts().
role_list(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'RoleList'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/RoleList">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `RoleDelete' of service `etcdserverpb.Auth'.
-spec role_delete(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleDeleteRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleDeleteResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
role_delete(Channel, Request) ->
    role_delete(Channel, Request, #{}).

-spec role_delete(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleDeleteRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleDeleteResponse'(),
    Opts :: egrpc_stub:opts().
role_delete(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'RoleDelete'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/RoleDelete">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `RoleGrantPermission' of service `etcdserverpb.Auth'.
-spec role_grant_permission(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleGrantPermissionRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleGrantPermissionResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
role_grant_permission(Channel, Request) ->
    role_grant_permission(Channel, Request, #{}).

-spec role_grant_permission(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleGrantPermissionRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleGrantPermissionResponse'(),
    Opts :: egrpc_stub:opts().
role_grant_permission(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'RoleGrantPermission'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/RoleGrantPermission">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `RoleRevokePermission' of service `etcdserverpb.Auth'.
-spec role_revoke_permission(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleRevokePermissionRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleRevokePermissionResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
role_revoke_permission(Channel, Request) ->
    role_revoke_permission(Channel, Request, #{}).

-spec role_revoke_permission(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleRevokePermissionRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.AuthRoleRevokePermissionResponse'(),
    Opts :: egrpc_stub:opts().
role_revoke_permission(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'RoleRevokePermission'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Auth/RoleRevokePermission">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).
