%%
%% @doc This module is auto-generated by rebar3_egrpc_plugin.
%%
%% This module was generated on 2025-06-16T03:17:46+00:00 and should not be modified manually
%% @end

-module(etcdgun_etcdserverpb_lease_service).

-export([lease_grant/2, lease_grant/3]).
-export([lease_revoke/2, lease_revoke/3]).
-export([lease_keep_alive/1, lease_keep_alive/2]).
-export([lease_time_to_live/2, lease_time_to_live/3]).
-export([lease_leases/2, lease_leases/3]).

-define(GRPC_SERVICE_NAME, 'etcdserverpb.Lease').

%% @doc Call the unary RPC method `LeaseGrant' of service `etcdserverpb.Lease'.
-spec lease_grant(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.LeaseGrantRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.LeaseGrantResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
lease_grant(Channel, Request) ->
    lease_grant(Channel, Request, #{}).

-spec lease_grant(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.LeaseGrantRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.LeaseGrantResponse'(),
    Opts :: egrpc_stub:opts().
lease_grant(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'LeaseGrant'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Lease/LeaseGrant">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `LeaseRevoke' of service `etcdserverpb.Lease'.
-spec lease_revoke(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.LeaseRevokeRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.LeaseRevokeResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
lease_revoke(Channel, Request) ->
    lease_revoke(Channel, Request, #{}).

-spec lease_revoke(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.LeaseRevokeRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.LeaseRevokeResponse'(),
    Opts :: egrpc_stub:opts().
lease_revoke(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'LeaseRevoke'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Lease/LeaseRevoke">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the bidi_streaming RPC method `LeaseKeepAlive' of service `etcdserverpb.Lease'.
-spec lease_keep_alive(egrpc:channel()) -> Result when
    Result :: egrpc_stub:bidi_streaming_ret().
lease_keep_alive(Channel) ->
    lease_keep_alive(Channel, #{}).

-spec lease_keep_alive(egrpc:channel(), Opts) -> Result when
    Result :: egrpc_stub:bidi_streaming_ret(),
    Opts :: egrpc_stub:opts().
lease_keep_alive(Channel, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'LeaseKeepAlive'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Lease/LeaseKeepAlive">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:bidi_streaming(Channel, Grpc, Opts).

%% @doc Call the unary RPC method `LeaseTimeToLive' of service `etcdserverpb.Lease'.
-spec lease_time_to_live(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.LeaseTimeToLiveRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.LeaseTimeToLiveResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
lease_time_to_live(Channel, Request) ->
    lease_time_to_live(Channel, Request, #{}).

-spec lease_time_to_live(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.LeaseTimeToLiveRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.LeaseTimeToLiveResponse'(),
    Opts :: egrpc_stub:opts().
lease_time_to_live(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'LeaseTimeToLive'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Lease/LeaseTimeToLive">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `LeaseLeases' of service `etcdserverpb.Lease'.
-spec lease_leases(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.LeaseLeasesRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.LeaseLeasesResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
lease_leases(Channel, Request) ->
    lease_leases(Channel, Request, #{}).

-spec lease_leases(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.LeaseLeasesRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.LeaseLeasesResponse'(),
    Opts :: egrpc_stub:opts().
lease_leases(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'LeaseLeases'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Lease/LeaseLeases">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).
