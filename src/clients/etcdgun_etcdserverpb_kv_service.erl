%%
%% @doc This module is auto-generated by rebar3_egrpc_plugin.
%%
%% This module was generated on 2025-06-15T05:25:10+00:00 and should not be modified manually
%% @end

-module(etcdgun_etcdserverpb_kv_service).

-export([range/2, range/3]).
-export([put/2, put/3]).
-export([delete_range/2, delete_range/3]).
-export([txn/2, txn/3]).
-export([compact/2, compact/3]).

-define(GRPC_SERVICE_NAME, 'etcdserverpb.KV').

%% @doc Call the unary RPC method `Range' of service `etcdserverpb.KV'.
-spec range(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.RangeRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.RangeResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
range(Channel, Request) ->
    range(Channel, Request, #{}).

-spec range(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.RangeRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.RangeResponse'(),
    Opts :: egrpc_stub:opts().
range(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Range'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.KV/Range">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Put' of service `etcdserverpb.KV'.
-spec put(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.PutRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.PutResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
put(Channel, Request) ->
    put(Channel, Request, #{}).

-spec put(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.PutRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.PutResponse'(),
    Opts :: egrpc_stub:opts().
put(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Put'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.KV/Put">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `DeleteRange' of service `etcdserverpb.KV'.
-spec delete_range(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.DeleteRangeRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.DeleteRangeResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
delete_range(Channel, Request) ->
    delete_range(Channel, Request, #{}).

-spec delete_range(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.DeleteRangeRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.DeleteRangeResponse'(),
    Opts :: egrpc_stub:opts().
delete_range(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'DeleteRange'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.KV/DeleteRange">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Txn' of service `etcdserverpb.KV'.
-spec txn(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.TxnRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.TxnResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
txn(Channel, Request) ->
    txn(Channel, Request, #{}).

-spec txn(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.TxnRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.TxnResponse'(),
    Opts :: egrpc_stub:opts().
txn(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Txn'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.KV/Txn">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Compact' of service `etcdserverpb.KV'.
-spec compact(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.CompactionRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.CompactionResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
compact(Channel, Request) ->
    compact(Channel, Request, #{}).

-spec compact(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.CompactionRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.CompactionResponse'(),
    Opts :: egrpc_stub:opts().
compact(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Compact'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.KV/Compact">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).
