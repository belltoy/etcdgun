%%
%% @doc This module is auto-generated by rebar3_egrpc_plugin.
%%
%% This module was generated on 2025-06-15T05:25:10+00:00 and should not be modified manually
%% @end

-module(etcdgun_etcdserverpb_cluster_service).

-export([member_add/2, member_add/3]).
-export([member_remove/2, member_remove/3]).
-export([member_update/2, member_update/3]).
-export([member_list/2, member_list/3]).
-export([member_promote/2, member_promote/3]).

-define(GRPC_SERVICE_NAME, 'etcdserverpb.Cluster').

%% @doc Call the unary RPC method `MemberAdd' of service `etcdserverpb.Cluster'.
-spec member_add(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberAddRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberAddResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
member_add(Channel, Request) ->
    member_add(Channel, Request, #{}).

-spec member_add(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberAddRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberAddResponse'(),
    Opts :: egrpc_stub:opts().
member_add(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'MemberAdd'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Cluster/MemberAdd">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `MemberRemove' of service `etcdserverpb.Cluster'.
-spec member_remove(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberRemoveRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberRemoveResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
member_remove(Channel, Request) ->
    member_remove(Channel, Request, #{}).

-spec member_remove(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberRemoveRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberRemoveResponse'(),
    Opts :: egrpc_stub:opts().
member_remove(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'MemberRemove'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Cluster/MemberRemove">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `MemberUpdate' of service `etcdserverpb.Cluster'.
-spec member_update(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberUpdateRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberUpdateResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
member_update(Channel, Request) ->
    member_update(Channel, Request, #{}).

-spec member_update(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberUpdateRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberUpdateResponse'(),
    Opts :: egrpc_stub:opts().
member_update(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'MemberUpdate'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Cluster/MemberUpdate">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `MemberList' of service `etcdserverpb.Cluster'.
-spec member_list(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberListRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberListResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
member_list(Channel, Request) ->
    member_list(Channel, Request, #{}).

-spec member_list(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberListRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberListResponse'(),
    Opts :: egrpc_stub:opts().
member_list(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'MemberList'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Cluster/MemberList">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `MemberPromote' of service `etcdserverpb.Cluster'.
-spec member_promote(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberPromoteRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberPromoteResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
member_promote(Channel, Request) ->
    member_promote(Channel, Request, #{}).

-spec member_promote(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_rpc_pb:'etcdserverpb.MemberPromoteRequest'(),
    Response :: etcdgun_rpc_pb:'etcdserverpb.MemberPromoteResponse'(),
    Opts :: egrpc_stub:opts().
member_promote(Channel, Request, Opts) ->
    RpcDef = etcdgun_rpc_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'MemberPromote'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/etcdserverpb.Cluster/MemberPromote">>,
        pb_module => etcdgun_rpc_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).
