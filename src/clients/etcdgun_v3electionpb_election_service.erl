%%
%% @doc This module is auto-generated by rebar3_egrpc_plugin.
%%
%% This module was generated on 2025-06-16T03:17:51+00:00 and should not be modified manually
%% @end

-module(etcdgun_v3electionpb_election_service).

-export([campaign/2, campaign/3]).
-export([proclaim/2, proclaim/3]).
-export([leader/2, leader/3]).
-export([observe/2, observe/3]).
-export([resign/2, resign/3]).

-define(GRPC_SERVICE_NAME, 'v3electionpb.Election').

%% @doc Call the unary RPC method `Campaign' of service `v3electionpb.Election'.
-spec campaign(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_v3election_pb:'v3electionpb.CampaignRequest'(),
    Response :: etcdgun_v3election_pb:'v3electionpb.CampaignResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
campaign(Channel, Request) ->
    campaign(Channel, Request, #{}).

-spec campaign(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_v3election_pb:'v3electionpb.CampaignRequest'(),
    Response :: etcdgun_v3election_pb:'v3electionpb.CampaignResponse'(),
    Opts :: egrpc_stub:opts().
campaign(Channel, Request, Opts) ->
    RpcDef = etcdgun_v3election_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Campaign'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/v3electionpb.Election/Campaign">>,
        pb_module => etcdgun_v3election_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Proclaim' of service `v3electionpb.Election'.
-spec proclaim(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_v3election_pb:'v3electionpb.ProclaimRequest'(),
    Response :: etcdgun_v3election_pb:'v3electionpb.ProclaimResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
proclaim(Channel, Request) ->
    proclaim(Channel, Request, #{}).

-spec proclaim(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_v3election_pb:'v3electionpb.ProclaimRequest'(),
    Response :: etcdgun_v3election_pb:'v3electionpb.ProclaimResponse'(),
    Opts :: egrpc_stub:opts().
proclaim(Channel, Request, Opts) ->
    RpcDef = etcdgun_v3election_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Proclaim'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/v3electionpb.Election/Proclaim">>,
        pb_module => etcdgun_v3election_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Leader' of service `v3electionpb.Election'.
-spec leader(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_v3election_pb:'v3electionpb.LeaderRequest'(),
    Response :: etcdgun_v3election_pb:'v3electionpb.LeaderResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
leader(Channel, Request) ->
    leader(Channel, Request, #{}).

-spec leader(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_v3election_pb:'v3electionpb.LeaderRequest'(),
    Response :: etcdgun_v3election_pb:'v3electionpb.LeaderResponse'(),
    Opts :: egrpc_stub:opts().
leader(Channel, Request, Opts) ->
    RpcDef = etcdgun_v3election_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Leader'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/v3electionpb.Election/Leader">>,
        pb_module => etcdgun_v3election_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).

%% @doc Call the server_streaming RPC method `Observe' of service `v3electionpb.Election'.
-spec observe(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_v3election_pb:'v3electionpb.LeaderRequest'(),
    Result :: egrpc_stub:server_streaming_ret().
observe(Channel, Request) ->
    observe(Channel, Request, #{}).

-spec observe(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:server_streaming_ret(),
    Request :: etcdgun_v3election_pb:'v3electionpb.LeaderRequest'(),
    Opts :: egrpc_stub:opts().
observe(Channel, Request, Opts) ->
    RpcDef = etcdgun_v3election_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Observe'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/v3electionpb.Election/Observe">>,
        pb_module => etcdgun_v3election_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:server_streaming(Channel, Request, Grpc, Opts).

%% @doc Call the unary RPC method `Resign' of service `v3electionpb.Election'.
-spec resign(egrpc:channel(), Request) -> Result when
    Request :: etcdgun_v3election_pb:'v3electionpb.ResignRequest'(),
    Response :: etcdgun_v3election_pb:'v3electionpb.ResignResponse'(),
    Result :: egrpc_stub:unary_ret(Response).
resign(Channel, Request) ->
    resign(Channel, Request, #{}).

-spec resign(egrpc:channel(), Request, Opts) -> Result when
    Result :: egrpc_stub:unary_ret(Response),
    Request :: etcdgun_v3election_pb:'v3electionpb.ResignRequest'(),
    Response :: etcdgun_v3election_pb:'v3electionpb.ResignResponse'(),
    Opts :: egrpc_stub:opts().
resign(Channel, Request, Opts) ->
    RpcDef = etcdgun_v3election_pb:find_rpc_def(?GRPC_SERVICE_NAME, 'Resign'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/v3electionpb.Election/Resign">>,
        pb_module => etcdgun_v3election_pb,
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:unary(Channel, Request, Grpc, Opts).
